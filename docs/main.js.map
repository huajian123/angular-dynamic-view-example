{"version":3,"sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.component.css","./src/app/dynamic-string.component.ts","./src/app/shared/alert.component.ts","./src/app/shared/example.service.ts","./src/app/shared/another-component.ts","./src/app/view-container-example/view-container-example.component.ts","./src/app/view-container-example/view-container-example.component.html","./src/app/view-container-example/view-container-example.component.css","./src/app/cdk-portal-example/cdk-portal-example.component.ts","./src/app/cdk-portal-example/cdk-portal-example.component.html","./src/app/cdk-portal-example/cdk-portal-example.component.css","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["AppComponent","icon","domSanitizer","this","addSvgIcon","bypassSecurityTrustResourceUrl","registerFontClassAlias","selector","template","compiler","injector","moduleRef","createComponentFromRaw","tmpCmp","data","some","tmpModule","imports","declarations","compileModuleAndAllComponentsAsync","then","factories","f","componentFactories","cmpRef","create","instance","name","vc","insert","hostView","destroy","read","message","type","closeAlert","success","warning","emit","ExampleService","AnotherComponent","param","resolver","messageValue","templateContext","anotherComponent","costumeInjector","providers","provide","deps","parent","spanContent","document","createElement","divContent","innerHTML","costumeContent","container","clear","factory","resolveComponentFactory","componentRef","createComponent","undefined","subscribe","index","indexOf","remove","lastView","get","length","move","createEmbeddedView","viewContainerRef","componentPortal","templatePortal","templatePortalContent","domPortal","domPortalContent","codeContainer","detach","attachComponentPortal","embeddedView","attachTemplatePortal","ref","routeConfig","path","redirectTo","pathMatch","component","AppModule","forRoot","bootstrap","useValue","bootstrapModule","catch","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(\n    private icon: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.icon.addSvgIcon(\"juejin\",\n      this.domSanitizer.bypassSecurityTrustResourceUrl('assets/image/juejin.svg')\n    )\n    this.icon.registerFontClassAlias('fontawesome', 'fa');\n  }\n\n}\n","export default \"<nav class=\\\"mat-elevation-z4\\\">\\r\\n    <ul class=\\\"nav-list\\\">\\r\\n        <li class=\\\"nav-item\\\"><a routerLink=\\\"/dynamic-view\\\">视图容器</a></li>\\r\\n        <li class=\\\"nav-item\\\"><a routerLink=\\\"/cdk-directive\\\">cdk指令</a></li>\\r\\n        <li class=\\\"nav-item\\\"><a routerLink=\\\"/string-component\\\">字符串组件</a></li>\\r\\n    </ul>\\r\\n    <section class=\\\"author-info\\\">\\r\\n        <img class=\\\"avatar\\\" src=\\\"/assets/image/avatar.jfif\\\">\\r\\n        <div>\\r\\n            <a href=\\\"https://blog.locotor.cn/\\\" title=\\\"github\\\" target=\\\"_blank\\\">\\r\\n                <mat-icon fontSet=\\\"fontawesome\\\" fontIcon=\\\"fa-github\\\"></mat-icon>\\r\\n            </a>\\r\\n            <a href=\\\"https://juejin.cn/user/782508008407687\\\" title=\\\"juejin\\\" target=\\\"_blank\\\">\\r\\n                <mat-icon fontSet=\\\"fontawesome\\\" fontIcon=\\\"fa-book\\\"></mat-icon>\\r\\n            </a>\\r\\n            <a href=\\\"https://blog.locotor.cn/\\\" title=\\\"blog\\\" target=\\\"_blank\\\">\\r\\n                <mat-icon fontSet=\\\"fontawesome\\\" fontIcon=\\\"fa-rss\\\"></mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n    </section>\\r\\n</nav>\\r\\n<section class=\\\"main mat-elevation-z6\\\">\\r\\n    <header>\\r\\n        <h1>Angular 动态视图</h1>\\r\\n    </header>\\r\\n    <section class=\\\"content\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </section>\\r\\n</section>\";","export default \":host {\\n  display: flex;\\n  align-items: center;\\n  height: 100%;\\n  padding: 2rem;\\n  background: #EBECFF;\\n}\\n\\nnav {\\n  display: flex;\\n  flex-direction: column;\\n  position: relative;\\n  left: 2rem;\\n  height: 80%;\\n  border-radius: 2rem;\\n  color: white;\\n  background-image: linear-gradient(#5872FF,#3F51B5)\\n}\\n\\n.nav-list {\\n  flex: 1;\\n  list-style: none;\\n  padding: 1rem;\\n}\\n\\n.nav-item {\\n  margin: 2rem;\\n}\\n\\nnav a {\\n  color: white;\\n}\\n\\nnav a mat-icon{\\n  font-size: 1rem;\\n  width: 1rem;\\n  margin: 0 .2rem;\\n}\\n\\n.author-info{\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  margin:1rem 0;\\n}\\n\\n.avatar{\\n  width: 7rem;\\n  border-radius: 3.5rem;\\n  margin-bottom: 1rem;\\n}\\n\\nsection.main {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n  padding: 1rem 2rem;\\n  border-radius: 1rem;\\n  height: 100%;\\n  background: #F6F6FE;\\n}\\n\\nheader {\\n  margin: 1rem 0;\\n}\\n\\n.content {\\n  flex: 1;\\n  border-top: 1px dotted;\\n  padding: 2rem;\\n  overflow: hidden;\\n}\\n\";","import {\n    AfterViewInit, Compiler, Component, ComponentRef, Injector,\n    NgModule, NgModuleRef, OnDestroy, ViewChild, ViewContainerRef\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\n\n@Component({\n    template: `<h2>以下内容为动态生成<h2>\n          <div #vc></div>`\n})\nexport class DynamicStringComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('vc', { read: ViewContainerRef }) vc?: ViewContainerRef;\n\n    private cmpRef?: ComponentRef<any>;\n\n    constructor(\n        private compiler: Compiler,\n        private injector: Injector,\n        private moduleRef: NgModuleRef<any>,\n    ) { }\n\n    ngAfterViewInit(): void {\n        this.createComponentFromRaw(`\n            <div style=\"border: 1px solid blue; margin: 5px; padding: 5px\">\n                <h4>动态插入字符串组件 </h4>\n                <h5>绑定值: {{data.some}}</h5>\n                <h4>显示 zorro 组件</h4>\n                <nz-row nzGutter=\"15\">\n                    <nz-col [nzSpan]=\"4\">\n                        <button nzType=\"primary\" nz-button nzSize=\"medium\">主要按钮</button>\n                    </nz-col>\n                </nz-row>\n            </div>`\n        );\n    }\n\n    // 用字符串创建一个动态组件\n    private createComponentFromRaw(template: string): void {\n        // 注意模板里用到了 zorro 的组件，所以像其他的 module 一样，需要引入它们\n        const tmpCmp = Component({ template })(class {\n            data = {\n                some: '123'\n            };\n        });\n\n        // 创建一个动态模块，和正常的模块引入各种资源一致\n        const tmpModule = NgModule({\n            imports: [\n                CommonModule,\n                NzGridModule,\n                NzButtonModule\n            ],\n            declarations: [tmpCmp],\n        })(class { });\n\n        // 编译模块和组件，再把它注入到当前的组件视图中\n        this.compiler.compileModuleAndAllComponentsAsync(tmpModule)\n            .then((factories) => {\n                const f = factories.componentFactories[0];\n                this.cmpRef = f.create(this.injector, [], null, this.moduleRef);\n                this.cmpRef.instance.name = 'my-dynamic-component';\n                this.vc?.insert(this.cmpRef.hostView);\n            });\n    }\n\n    // 注意销毁动态创建的组件\n    ngOnDestroy(): void {\n        if (this.cmpRef) {\n            this.cmpRef.destroy();\n        }\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    template: `\n        <div class=\"alert-container mat-elevation-z2\" [class]=\"classConfig()\">\n            <span class=\"message\">{{message}}</span>\n            <ng-content></ng-content>\n            <button mat-button (click)=\"emitCloseEvent()\">关闭</button>\n        </div>\n      `,\n    styles: [\n        `.alert-container {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 1rem;\n            margin: 1rem;\n            border-radius: .5rem;\n            color: white;\n        }`,\n        '.message { font-size: 1rem; }',\n        '.success { background: #81b29a; }',\n        '.warning { background: #e07a5f; }'\n    ]\n})\nexport class AlertComponent {\n    @Input() message = '空消息提示';\n    @Input() type = 'success';\n    @Output() closeAlert = new EventEmitter();\n    classConfig() {\n        return {\n            success: this.type === 'success',\n            warning: this.type === 'warning'\n        };\n    }\n\n    emitCloseEvent(): void {\n        this.closeAlert.emit();\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ExampleService {\n    message = '以依赖注入的方式传值';\n}\n","import { Component } from '@angular/core';\nimport { ExampleService } from './example.service';\n\n@Component({\n    template: `\n    <section class=\"template-wrapper\" style=\"background-color:#81b29a;color:#FFF\">\n        <span>来自另一个动态组件：{{param.message}}</span>\n        <ng-content></ng-content>\n    </section>`\n})\nexport class AnotherComponent {\n    constructor(public param: ExampleService) { }\n}\n","import {\r\n    AfterViewInit,\r\n    Component, ComponentFactoryResolver, EmbeddedViewRef, Injector,\r\n    OnDestroy, TemplateRef, ViewChild, ViewContainerRef\r\n} from '@angular/core';\r\nimport { AlertComponent } from '../shared/alert.component';\r\nimport { AnotherComponent } from '../shared/another-component';\r\nimport { ExampleService } from '../shared/example.service';\r\n\r\n@Component({\r\n    templateUrl: './view-container-example.component.html',\r\n    styleUrls: ['./view-container-example.component.css']\r\n})\r\nexport class ViewContainerExampleComponent implements AfterViewInit, OnDestroy {\r\n\r\n    @ViewChild('dynamicComponentContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n    @ViewChild('templateView', { read: TemplateRef }) template!: TemplateRef<any>;\r\n    attachedEmbeddedView?: EmbeddedViewRef<any>;\r\n    messageValue = '';\r\n    templateContext = { message: '来自模板上下文的值' };\r\n    anotherComponent = AnotherComponent;\r\n    costumeInjector: Injector;\r\n    costumeContent: HTMLElement[][];\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        injector: Injector\r\n    ) {\r\n        this.costumeInjector =\r\n            Injector.create({ providers: [{ provide: ExampleService, deps: [] }], parent: injector });\r\n        const spanContent = document.createElement('span');\r\n        const divContent = document.createElement('div');\r\n        spanContent.innerHTML = 'hello, world';\r\n        divContent.innerHTML = '<span>locotor</span>';\r\n        this.costumeContent = [[spanContent, divContent]];\r\n    }\r\n    ngAfterViewInit(): void { }\r\n\r\n    ngOnDestroy(): void {\r\n        this.container.clear();\r\n    }\r\n\r\n    createComponent(type: string): void {\r\n        const factory = this.resolver.resolveComponentFactory(AlertComponent);\r\n        const componentRef = this.container.createComponent(factory, undefined, undefined, this.costumeContent);\r\n        componentRef.instance.type = type;\r\n        if (this.messageValue) {\r\n            componentRef.instance.message = this.messageValue;\r\n            this.messageValue = '';\r\n        }\r\n        componentRef.instance.closeAlert.subscribe(() => {\r\n            const index = this.container.indexOf(componentRef.hostView);\r\n            this.container.remove(index);\r\n        });\r\n    }\r\n\r\n    moveToTop(): void {\r\n        const lastView = this.container.get(this.container.length - 1);\r\n        if (!lastView) { return; }\r\n        this.container.move(lastView, 0);\r\n    }\r\n\r\n    createTemplate(): void {\r\n        this.container.createEmbeddedView(this.template, this.templateContext);\r\n    }\r\n\r\n    clearContainer(): void {\r\n        this.container.clear();\r\n    }\r\n\r\n}\r\n\r\n","export default \"<section class=\\\"operation-pane\\\">\\r\\n    <form>\\r\\n        <mat-form-field>\\r\\n            <input matInput placeholder=\\\"输入消息内容\\\" name=\\\"alert-message\\\" [(ngModel)]=\\\"messageValue\\\" />\\r\\n        </mat-form-field>\\r\\n    </form>\\r\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\"\\r\\n        (click)=\\\"createComponent('success')\\\">插入成功消息</button>\\r\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"accent\\\"\\r\\n        (click)=\\\"createComponent('warning')\\\">插入警告消息</button>\\r\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\" (click)=\\\"createTemplate()\\\">插入模板</button>\\r\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\" (click)=\\\"moveToTop()\\\">置顶最后一个</button>\\r\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\" (click)=\\\"clearContainer()\\\">清空</button>\\r\\n</section>\\r\\n\\r\\n<div class=\\\"dynamic-view-container\\\">\\r\\n    <h2 style=\\\"border-bottom: 1px solid;\\\">以代码方式动态插入</h2>\\r\\n    <ng-container #dynamicComponentContainer></ng-container>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"dynamic-view-container\\\">\\r\\n    <h2 style=\\\"border-bottom: 1px solid;\\\">以指令方式动态插入</h2>\\r\\n    <ng-container *ngComponentOutlet=\\\"anotherComponent;injector:costumeInjector;content:costumeContent\\\">\\r\\n    </ng-container>\\r\\n    <ng-container *ngTemplateOutlet=\\\"templateView; context: templateContext\\\"></ng-container>\\r\\n</div>\\r\\n\\r\\n<div></div>\\r\\n\\r\\n<ng-template #templateView let-param=\\\"message\\\">\\r\\n    <section class=\\\"template-wrapper\\\">\\r\\n        <span>来自 ng-template 的动态内容</span>\\r\\n        <span>{{param}}</span>\\r\\n    </section>\\r\\n</ng-template>\";","export default \":host{\\r\\n    display: flex;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n\\r\\n\";","import { AfterViewInit, Component, ComponentRef, ElementRef, EmbeddedViewRef, OnInit, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\nimport { CdkPortal, ComponentPortal, DomPortal, Portal, TemplatePortal, CdkPortalOutletAttachedRef, CdkPortalOutlet } from '@angular/cdk/portal';\nimport { AlertComponent } from '../shared/alert.component';\n\n@Component({\n  templateUrl: './cdk-portal-example.component.html',\n  styleUrls: ['./cdk-portal-example.component.css']\n})\nexport class CdkPortalExampleComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('codeStyleHost', { read: CdkPortalOutlet }) codeContainer!: CdkPortalOutlet;\n  @ViewChild('directiveStyleHost', { read: CdkPortalOutlet }) directiveContainer!: CdkPortalOutlet;\n  @ViewChild('directiveTemplate', { read: CdkPortal }) directiveTemplateContent!: CdkPortal;\n  @ViewChild('templatePortalContent') templatePortalContent!: TemplateRef<unknown>;\n  @ViewChild('domPortalContent') domPortalContent!: ElementRef<HTMLElement>;\n\n  selectedPortal?: Portal<any>;\n  componentPortal?: ComponentPortal<AlertComponent>;\n  templatePortal?: TemplatePortal<any>;\n  domPortal?: DomPortal<any>;\n  embeddedView?: EmbeddedViewRef<any>;\n\n  constructor(private viewContainerRef: ViewContainerRef) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.componentPortal = new ComponentPortal(AlertComponent);\n    this.templatePortal = new TemplatePortal(\n      this.templatePortalContent,\n      this.viewContainerRef\n    );\n    this.domPortal = new DomPortal(this.domPortalContent);\n  }\n\n  attachComponent(): void {\n    if (!this.componentPortal) { return; }\n    this.codeContainer.detach();\n    const componentRef = this.codeContainer.attachComponentPortal(this.componentPortal);\n    componentRef.instance.message = '输入属性传值示例';\n    // 输出事件绑定示例\n    componentRef.instance.closeAlert.subscribe(() => {\n      this.codeContainer.detach();\n    });\n  }\n\n  attachTemplate(): void {\n    if (!this.templatePortal) { return; }\n    this.codeContainer.detach();\n    this.embeddedView = this.codeContainer.attachTemplatePortal(this.templatePortal);\n  }\n\n  initComponent(ref: CdkPortalOutletAttachedRef): void {\n    if (ref instanceof ComponentRef) {\n      ref.instance.message = '输入属性传值示例';\n      ref.instance.closeAlert.subscribe(() => {\n        ref.destroy();\n      });\n    }\n  }\n\n}\n","export default \"<section class=\\\"operation-pane\\\">\\n    <h2>指令传值</h2>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\"\\n        (click)=\\\"selectedPortal = componentPortal\\\">插入组件</button>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\"\\n        (click)=\\\"selectedPortal = templatePortal\\\">插入模板</button>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\"\\n        (click)=\\\"selectedPortal = directiveTemplateContent\\\">插入指令创建的模板</button>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\"\\n        (click)=\\\"selectedPortal = domPortal\\\">插入原生DOM</button>\\n    <mat-divider style=\\\"margin: 1rem 0;\\\"></mat-divider>\\n    <h2>CdkPortalOutlet 方法</h2>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\" (click)=\\\"attachComponent()\\\">插入组件</button>\\n    <button mat-stroked-button class=\\\"operation-button\\\" color=\\\"primary\\\" (click)=\\\"attachTemplate()\\\">插入模板</button>\\n</section>\\n<section class=\\\"host-container\\\">\\n    <div class=\\\"dynamic-view-container \\\">\\n        <h2>给指令传值插入内容:</h2>\\n        <ng-template #directiveStyleHost [cdkPortalOutlet]=\\\"selectedPortal\\\" (attached)=\\\"initComponent($event)\\\">\\n        </ng-template>\\n    </div>\\n    <div class=\\\"dynamic-view-container \\\">\\n        <h2>调用 CdkPortalOutlet 对象的方法插入内容:</h2>\\n        <ng-template #codeStyleHost cdkPortalOutlet></ng-template>\\n    </div>\\n</section>\\n<div #domPortalContent class=\\\"dom-section\\\">\\n    <h2>这是一个原生DOM内容</h2>\\n    <p>可以用任意原生 DOM 元素构建 DomPortal。<br />\\n        动态插入时，DomPortal 会把内容原样移动到新的地方。</p>\\n    <p>在取消插入时，将再次原样恢复到其原来的位置。</p>\\n</div>\\n\\n<ng-template #templatePortalContent>\\n    <section class=\\\"template-wrapper\\\">\\n        <span>来自 ng-template 的动态内容</span>\\n    </section>\\n</ng-template>\\n<ng-template cdk-portal #directiveTemplate>\\n    <section class=\\\"template-wrapper\\\">\\n        <span>这是用 cdk-portal 指令声明的模板</span>\\n    </section>\\n</ng-template>\";","export default \":host {\\n  display: flex;\\n  height: 100%;\\n}\\n\\ndiv.dom-section {\\n  margin-left: 1rem;\\n  padding: 1rem;\\n  background-color: #f2cc8f;\\n  color: #3d405b;\\n}\\n\\n.host-container {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n}\\n\\n.host-container > :last-child{\\n  margin-top: 1rem;\\n}\";","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { registerLocaleData } from '@angular/common';\nimport zh from '@angular/common/locales/zh';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { zh_CN } from 'ng-zorro-antd/i18n';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\n\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDividerModule } from '@angular/material/divider';\n\nimport { AppComponent } from './app.component';\nimport { DynamicStringComponent } from './dynamic-string.component';\nimport { AlertComponent } from './shared/alert.component';\nimport { ViewContainerExampleComponent } from './view-container-example/view-container-example.component';\nimport { CdkPortalExampleComponent } from './cdk-portal-example/cdk-portal-example.component';\n\nregisterLocaleData(zh);\n\nconst routeConfig: Route[] = [\n  {\n    path: '',\n    redirectTo: 'dynamic-view',\n    pathMatch: 'full'\n  },\n  {\n    path: 'dynamic-view',\n    component: ViewContainerExampleComponent\n  },\n  {\n    path: 'cdk-directive',\n    component: CdkPortalExampleComponent\n  },\n  {\n    path: 'string-component',\n    component: DynamicStringComponent\n  },\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DynamicStringComponent,\n    ViewContainerExampleComponent,\n    AlertComponent,\n    CdkPortalExampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    RouterModule.forRoot(routeConfig),\n    NzGridModule,\n    NzButtonModule,\n    PortalModule,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatDividerModule\n  ],\n  bootstrap: [AppComponent],\n  providers: [{ provide: NZ_I18N, useValue: zh_CN }]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}